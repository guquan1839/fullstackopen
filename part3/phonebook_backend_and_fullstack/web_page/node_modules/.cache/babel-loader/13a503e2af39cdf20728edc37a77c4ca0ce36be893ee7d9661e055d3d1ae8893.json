{"ast":null,"code":"// const Header = (cou) =>{\n//   return(\n//     <div>\n//     <p>\n//       {cou.course}\n//     </p>\n//     </div>\n//   )\n// }\n\n// const Content = (pa)=>{\n//   return(\n//     <div>\n//       <p>\n//         {pa.part1}{pa.ex1}\n//       </p>\n//       <p>\n//         {pa.part2}{pa.ex2}\n//       </p>\n//       <p>\n//         {pa.part2}{pa.ex2}\n//       </p>\n//     </div>\n//   )\n\n// }\n\n// const Total = (to)=>{\n//   return(\n//     <div>\n//       <p>\n//         Number of exercises {to.total}\n//       </p>\n//     </div>\n//   )\n// }\n\n// const App=()=>{\n//   const course = \"half stack application development\"\n//   const part1 = \" fundamentals of react\"\n//   const exercise1 = 10\n//   const part2 = \"using props to pass data\"\n//   const exercise2 = 7\n//   const part3 = \"State of a component\"\n//   const exercise3 = 14\n\n//   return(\n//     // <div>\n//     //   <h1>{course}</h1>\n//     //   <p>\n//     //     {part1}{exercise1}\n//     //   </p>\n//     //   <p>\n//     //     {part2}{exercise2}\n//     //   </p>\n//     //   <p>\n//     //     {part3}{exercise3}\n//     //   </p>\n//     //   <p>\n//     //     Number of exercises {exercise1 + exercise2 + exercise3}\n//     //   </p>\n//     // </div>\n//     <div>\n//       <Header course = {course}/>\n//       <Content part1 = {part1} part2 = {part2} part3 = {part3} ex1 = {exercise1} ex2 = {exercise2} ex3 = {exercise3}/>\n//       <Total total = {exercise1+exercise2+exercise3}/>\n//     </div>\n//   )\n// }\n\n// export default App;\n\n//2 a 从渲染集合到模块学习\n// console.log 注意在react中 console.log(\"props value is \", props)才是正确的\n\n//Protip: Visual Studio code snippets\n\n//通过VS Code，我们可以轻易创建 '片段'(快速生成常用的重复使用的代码部分)，此外也可以从插件市场下载！\n\n//Rendering Collections\n\n// const App = (props) =>{\n//     const {notes} = props\n\n//     return(\n//         <div>\n//             <h1>Notes</h1>\n\n//         <ul>\n\n//             <li>\n//                 {notes[0].content}\n//             </li>\n\n//             <li>\n//                 {notes[1].content}\n//             </li>\n\n//             <li>\n//                 {notes[2].content}\n//             </li>\n//         </ul>\n\n//         </div>\n//     )\n// }\n\n// export default App\n\n//每个笔记都包含它的文本内容和一个时间戳，以及一个用于标记该笔记是否被归类为重要的布尔值，还有一个唯一的ID\n//上面的例子有效的原因在于数组中刚好有三个笔记。\n//我们应该通过Map函数来改进上面代码！\n\n// const App = (props) =>{\n\n//     const {notes} = props\n//     return(\n//     <div>\n//         <h1>\n//             Notes\n//         </h1>\n//         <ul>\n//         {notes.map(note => \n\n//         <li key = {note.id}>\n//             {note.content}\n//         </li>\n\n//         )}\n//         </ul>\n\n//     </div>\n//     )\n// }\n\n// export default App\n\n//Anti-pattern Array indexes as keys\n//我们使用数组索引作为键值来是控制台中的错误信息消失。\n//通过箱Map方法的回调函数传递第二个参数，即可获得索引\n\n// const App = ({notes}) =>{\n//     return(\n//         <div>\n//             <ul>\n//                 {notes.map((note,i) =>\n//                 <li key = {i}>\n//                         {note.content}\n//                 </li>\n\n//                 )}\n//             </ul>\n//         </div>\n//     )\n\n// }\n// export default App\n\n//下面我们Refactiring\n\n// const Note = ({note}) =>{\n//     return (\n//         <li>\n//             {note.content}\n//         </li>\n//     )\n// }\n\n// const App = ({notes}) =>{\n//     return(\n// <div>\n//     <h1>\n//         Notes\n//     </h1>\n\n//     <ul>\n//         {\n//             notes.map(note => <Note key = {note.id} note = {note}/>)\n//         }\n//     </ul>\n// </div>\n//     )\n// }\n\n// export default App\n\n// import Note  from './Node'\n\n// const App = ({notes}) =>{\n//     return(\n// <div>\n//     <h1>\n//         Notes\n//     </h1>\n\n//     <ul>\n//         {\n//             notes.map(note => <Note key = {note.id} note = {note}/>)\n//         }\n//     </ul>\n// </div>\n//     )\n// }\n\n// export default App\n\n//2.1\n//2.1\n\n// import Course from \"./components/Course\"\n\n// const App = () => {\n//     const course = {\n//       id: 1,\n//       name: 'Half Stack application development',\n//       parts: [\n//         {\n//           name: 'Fundamentals of React',\n//           exercises: 10,\n//           id: 1\n//         },\n//         {\n//           name: 'Using props to pass data',\n//           exercises: 7,\n//           id: 2\n//         },\n//         {\n//           name: 'State of a component',\n//           exercises: 14,\n//           id: 3\n//         }\n//       ]\n//     }\n\n//     return <Course course={course} />\n//   }\n\n//   export default App\n\n//d 在服务器中获取数据\n\n//2.15\n//REST\n//在rest中，我们把单个数据对象成为资源。每个资源抖音一个与其相对应的唯一地址(URL)\n//根据json-server使用的一般惯例\n//eg:我们可以通过资源URL http://xxx.xxx.xxx/notes/3找到一个单独的笔记。其中3是ID。\n//除此之外，notes指向一个包含全部笔记的资源的集合。\n\n//咨议员是从服务器中获取\n//而根据REST惯例 通过向notes URL发出HTTP POST请求来创建一个来存储笔记的新资源\n\n//我们需要注意数据格式为json格式，此外还需要注意content-type请求头，值为application/json\n\n//Sending data to the server\n//让我们对负责创建一个新笔记的事件处理程序进行修改:\n// import { useState, useEffect } from 'react'\n// import axios from 'axios'\n// import Note from './components/Note'\n\n// const App = () => {\n//   const [notes, setNotes] = useState([])\n//   const [newNote, setNewNote] = useState('')\n//   const [showAll, setShowAll] = useState(true)\n\n//   //获得从json服务器中获取数据\n//   useEffect(() => {\n//     axios\n//       .get('http://localhost:3001/notes')\n//       .then(response => {\n//         setNotes(response.data)\n//       })\n//   }, [])\n\n// //添加笔记\n//   const addNote = (event) => {\n//     event.preventDefault()\n//     const noteObject = {\n//       content: newNote,\n//       important: Math.random() > 0.5,\n//     }\n// //这个是重点，因为我们下面需要添加新的数据！\n//     axios\n//       .post('http://localhost:3001/notes', noteObject)\n//       .then(response => {\n//         setNotes(notes.concat(response.data))\n//         setNewNote('')\n//       })\n//   }\n\n//   //老样子，实现实时输入的功能\n//   const handleNoteChange = (event) => {\n//     setNewNote(event.target.value)\n//   }\n\n//   //过滤是否为重要的条目\n//   const notesToShow = showAll\n//     ? notes\n//     : notes.filter(note => note.important)\n\n//   //\n//   const toggleImportanceOf = (id) => {\n//     console.log('importance of ' + id + ' needs to be toggled')\n//     //我们可以通过访问不太的URL来对不同ID的笔记数据进行访问\n//     //甚至可以通过PUT进行替换，用PATCH更改某些属性。\n\n//     const url = `http://localhost:3001/notes/${id}`\n//     const note = notes.find(n=>n.id===id)\n\n//     const changeNote = {...note, important: !note.important}\n\n// //...note 创建了一个新的对象，并且复制了note对象的全部属性。\n// //当我们给...note创建的新对象添加属性时。新对象的important变为原来数的相反值\n\n// //除此之外changeNote是一个浅层拷贝，新对象的值与旧对象的相同。\n// //如果旧对象的值本身是对象，\n//     axios.put(url,changeNote).then(response =>{\n\n//         setNotes(notes.map(note=> note.id !== id ?note:response.data))\n\n//     })\n\n//   }\n\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <div>\n//         <button onClick={() => setShowAll(!showAll)}>\n//           show {showAll ? 'important' : 'all' }\n//         </button>\n//       </div> \n//       <ul>\n\n//         <ul>\n//           {notesToShow.map(note => \n//             <Note key={note.id} note={note} \n\n//               toggleImportance = {() => toggleImportanceOf(note.id)}\n//   //注意这里是为了对不同id的数据进行修改！！！          \n//             />\n//           )}\n//         </ul>\n\n//       </ul>\n//       <form onSubmit={addNote}>\n//         <input value={newNote} onChange={handleNoteChange} />\n//         <button type=\"submit\">save</button>\n//       </form>\n//     </div>\n//   )\n// }\n\n// export default App\n//我们通常用setNotes函数将后端数据返回的新数据添加到状态列表中。\n//然后重置笔记创建的表单\n//注意:concat方法不改变组件的原来的状态，而是创建一个新副本\n\n//Changing the importance of notes\n//下面技工啊为每个笔记添加一个按钮，使得我们可以切换笔记的重要性\n\n//对于Note属性\n\n// const Note = ({ note, toggleImportance }) => {\n//   const label = note.important\n//     ? 'make not important' : 'make important'\n\n//   return (\n//     <li>\n//       {note.content}\n//       <button onClick={toggleImportance}>{label}</button>\n//     </li>\n//   )\n// }","map":{"version":3,"names":[],"sources":["/home/guquan/summer_school/2h1/h15/src/App.js"],"sourcesContent":["// const Header = (cou) =>{\n//   return(\n//     <div>\n//     <p>\n//       {cou.course}\n//     </p>\n//     </div>\n//   )\n// }\n\n// const Content = (pa)=>{\n//   return(\n//     <div>\n//       <p>\n//         {pa.part1}{pa.ex1}\n//       </p>\n//       <p>\n//         {pa.part2}{pa.ex2}\n//       </p>\n//       <p>\n//         {pa.part2}{pa.ex2}\n//       </p>\n//     </div>\n//   )\n\n// }\n\n// const Total = (to)=>{\n//   return(\n//     <div>\n//       <p>\n//         Number of exercises {to.total}\n//       </p>\n//     </div>\n//   )\n// }\n\n// const App=()=>{\n//   const course = \"half stack application development\"\n//   const part1 = \" fundamentals of react\"\n//   const exercise1 = 10\n//   const part2 = \"using props to pass data\"\n//   const exercise2 = 7\n//   const part3 = \"State of a component\"\n//   const exercise3 = 14\n\n//   return(\n//     // <div>\n//     //   <h1>{course}</h1>\n//     //   <p>\n//     //     {part1}{exercise1}\n//     //   </p>\n//     //   <p>\n//     //     {part2}{exercise2}\n//     //   </p>\n//     //   <p>\n//     //     {part3}{exercise3}\n//     //   </p>\n//     //   <p>\n//     //     Number of exercises {exercise1 + exercise2 + exercise3}\n//     //   </p>\n//     // </div>\n//     <div>\n//       <Header course = {course}/>\n//       <Content part1 = {part1} part2 = {part2} part3 = {part3} ex1 = {exercise1} ex2 = {exercise2} ex3 = {exercise3}/>\n//       <Total total = {exercise1+exercise2+exercise3}/>\n//     </div>\n//   )\n// }\n\n// export default App;\n\n//2 a 从渲染集合到模块学习\n// console.log 注意在react中 console.log(\"props value is \", props)才是正确的\n\n//Protip: Visual Studio code snippets\n\n//通过VS Code，我们可以轻易创建 '片段'(快速生成常用的重复使用的代码部分)，此外也可以从插件市场下载！\n\n//Rendering Collections\n\n// const App = (props) =>{\n//     const {notes} = props\n\n//     return(\n//         <div>\n//             <h1>Notes</h1>\n\n//         <ul>\n\n       \n//             <li>\n//                 {notes[0].content}\n//             </li>\n\n//             <li>\n//                 {notes[1].content}\n//             </li>\n\n//             <li>\n//                 {notes[2].content}\n//             </li>\n//         </ul>\n\n//         </div>\n//     )\n// }\n\n// export default App\n\n//每个笔记都包含它的文本内容和一个时间戳，以及一个用于标记该笔记是否被归类为重要的布尔值，还有一个唯一的ID\n//上面的例子有效的原因在于数组中刚好有三个笔记。\n//我们应该通过Map函数来改进上面代码！\n\n\n// const App = (props) =>{\n\n\n//     const {notes} = props\n//     return(\n//     <div>\n//         <h1>\n//             Notes\n//         </h1>\n//         <ul>\n//         {notes.map(note => \n        \n//         <li key = {note.id}>\n//             {note.content}\n//         </li>\n\n//         )}\n//         </ul>\n\n\n//     </div>\n//     )\n// }\n\n// export default App\n\n\n//Anti-pattern Array indexes as keys\n//我们使用数组索引作为键值来是控制台中的错误信息消失。\n//通过箱Map方法的回调函数传递第二个参数，即可获得索引\n\n// const App = ({notes}) =>{\n//     return(\n//         <div>\n//             <ul>\n//                 {notes.map((note,i) =>\n//                 <li key = {i}>\n//                         {note.content}\n//                 </li>\n\n//                 )}\n//             </ul>\n//         </div>\n//     )\n\n// }\n// export default App\n\n//下面我们Refactiring\n\n// const Note = ({note}) =>{\n//     return (\n//         <li>\n//             {note.content}\n//         </li>\n//     )\n// }\n\n// const App = ({notes}) =>{\n//     return(\n// <div>\n//     <h1>\n//         Notes\n//     </h1>\n\n\n//     <ul>\n//         {\n//             notes.map(note => <Note key = {note.id} note = {note}/>)\n//         }\n//     </ul>\n// </div>\n//     )\n// }\n\n// export default App\n\n\n// import Note  from './Node'\n\n// const App = ({notes}) =>{\n//     return(\n// <div>\n//     <h1>\n//         Notes\n//     </h1>\n\n\n//     <ul>\n//         {\n//             notes.map(note => <Note key = {note.id} note = {note}/>)\n//         }\n//     </ul>\n// </div>\n//     )\n// }\n\n// export default App\n\n\n\n//2.1\n//2.1\n\n// import Course from \"./components/Course\"\n  \n// const App = () => {\n//     const course = {\n//       id: 1,\n//       name: 'Half Stack application development',\n//       parts: [\n//         {\n//           name: 'Fundamentals of React',\n//           exercises: 10,\n//           id: 1\n//         },\n//         {\n//           name: 'Using props to pass data',\n//           exercises: 7,\n//           id: 2\n//         },\n//         {\n//           name: 'State of a component',\n//           exercises: 14,\n//           id: 3\n//         }\n//       ]\n//     }\n  \n//     return <Course course={course} />\n//   }\n  \n//   export default App\n\n\n\n//d 在服务器中获取数据\n\n//2.15\n//REST\n//在rest中，我们把单个数据对象成为资源。每个资源抖音一个与其相对应的唯一地址(URL)\n//根据json-server使用的一般惯例\n//eg:我们可以通过资源URL http://xxx.xxx.xxx/notes/3找到一个单独的笔记。其中3是ID。\n//除此之外，notes指向一个包含全部笔记的资源的集合。\n\n\n//咨议员是从服务器中获取\n//而根据REST惯例 通过向notes URL发出HTTP POST请求来创建一个来存储笔记的新资源\n\n//我们需要注意数据格式为json格式，此外还需要注意content-type请求头，值为application/json\n\n\n\n//Sending data to the server\n//让我们对负责创建一个新笔记的事件处理程序进行修改:\n// import { useState, useEffect } from 'react'\n// import axios from 'axios'\n// import Note from './components/Note'\n\n// const App = () => {\n//   const [notes, setNotes] = useState([])\n//   const [newNote, setNewNote] = useState('')\n//   const [showAll, setShowAll] = useState(true)\n\n\n\n//   //获得从json服务器中获取数据\n//   useEffect(() => {\n//     axios\n//       .get('http://localhost:3001/notes')\n//       .then(response => {\n//         setNotes(response.data)\n//       })\n//   }, [])\n\n\n// //添加笔记\n//   const addNote = (event) => {\n//     event.preventDefault()\n//     const noteObject = {\n//       content: newNote,\n//       important: Math.random() > 0.5,\n//     }\n// //这个是重点，因为我们下面需要添加新的数据！\n//     axios\n//       .post('http://localhost:3001/notes', noteObject)\n//       .then(response => {\n//         setNotes(notes.concat(response.data))\n//         setNewNote('')\n//       })\n//   }\n\n//   //老样子，实现实时输入的功能\n//   const handleNoteChange = (event) => {\n//     setNewNote(event.target.value)\n//   }\n\n//   //过滤是否为重要的条目\n//   const notesToShow = showAll\n//     ? notes\n//     : notes.filter(note => note.important)\n\n\n\n\n\n//   //\n//   const toggleImportanceOf = (id) => {\n//     console.log('importance of ' + id + ' needs to be toggled')\n//     //我们可以通过访问不太的URL来对不同ID的笔记数据进行访问\n//     //甚至可以通过PUT进行替换，用PATCH更改某些属性。\n\n//     const url = `http://localhost:3001/notes/${id}`\n//     const note = notes.find(n=>n.id===id)\n  \n//     const changeNote = {...note, important: !note.important}\n\n// //...note 创建了一个新的对象，并且复制了note对象的全部属性。\n// //当我们给...note创建的新对象添加属性时。新对象的important变为原来数的相反值\n\n\n\n\n// //除此之外changeNote是一个浅层拷贝，新对象的值与旧对象的相同。\n// //如果旧对象的值本身是对象，\n//     axios.put(url,changeNote).then(response =>{\n\n//         setNotes(notes.map(note=> note.id !== id ?note:response.data))\n\n\n\n//     })\n  \n  \n  \n//   }\n\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <div>\n//         <button onClick={() => setShowAll(!showAll)}>\n//           show {showAll ? 'important' : 'all' }\n//         </button>\n//       </div> \n//       <ul>\n\n\n//         <ul>\n//           {notesToShow.map(note => \n//             <Note key={note.id} note={note} \n            \n//               toggleImportance = {() => toggleImportanceOf(note.id)}\n//   //注意这里是为了对不同id的数据进行修改！！！          \n//             />\n//           )}\n//         </ul>\n\n\n\n\n//       </ul>\n//       <form onSubmit={addNote}>\n//         <input value={newNote} onChange={handleNoteChange} />\n//         <button type=\"submit\">save</button>\n//       </form>\n//     </div>\n//   )\n// }\n\n// export default App\n//我们通常用setNotes函数将后端数据返回的新数据添加到状态列表中。\n//然后重置笔记创建的表单\n//注意:concat方法不改变组件的原来的状态，而是创建一个新副本\n\n\n//Changing the importance of notes\n//下面技工啊为每个笔记添加一个按钮，使得我们可以切换笔记的重要性\n\n//对于Note属性\n\n// const Note = ({ note, toggleImportance }) => {\n//   const label = note.important\n//     ? 'make not important' : 'make important'\n\n//   return (\n//     <li>\n//       {note.content}\n//       <button onClick={toggleImportance}>{label}</button>\n//     </li>\n//   )\n// }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAKA;AACA;AACA;;AAEA;;AAIA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}