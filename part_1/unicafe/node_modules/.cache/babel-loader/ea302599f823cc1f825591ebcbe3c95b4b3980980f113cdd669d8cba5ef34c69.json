{"ast":null,"code":"var _jsxFileName = \"/home/guquan/summer_school/part_1/unicafe/src/App.js\",\n  _s = $RefreshSig$();\n//1.6\n// const Button = ({onclick,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={onclick}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n// const Display = ({text, value}) =>{\n//   return(\n//     <div>\n//       {text}, {value}\n//     </div>\n//   )\n\n// }\n\n// const App  = () => {\n//   const [good ,setGood] = useState(0)\n//   const [neutral, setNeutral] = useState(0)\n//   const [bad, setBad] = useState(0)\n\n//   const goodClick = ()=>{\n//     setGood(good + 1)\n\n//   }\n\n//   const neutralClick = () =>{\n//     setNeutral(neutral + 1)\n//   }\n\n//   const badClick = () =>{\n//     setBad(bad + 1)\n//   }\n\n//   return(\n//     <div>\n//       <h1>\n//         Give Feedback\n//       </h1>\n\n//       <Button onclick={goodClick} text={\"good\"}/>\n//       <Button onclick={neutralClick} text={\"neutral\"}/>\n//       <Button onclick={badClick} text={\"bad\"}/>\n\n//       <h1>\n//         Statistics\n//       </h1>\n//       <Display text = {\"good\"} value = {good}/>\n//       <Display text = {\"neutral\"} value = {neutral}/>\n//       <Display text = {\"bad\"} value = {bad}/>\n//     </div>\n//   )\n\n// }\n\n//1.7 unicafe step 2\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n// const Display = ({text,value}) =>{\n\n//   return (\n//     <div>\n//       {text},{value}\n//     </div>\n//   )\n// }\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n\n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n\n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Display text={\"good\"} value={good}/>\n// <Display text={\"neutral\"} value={neutral}/>\n// <Display text={\"bad\"} value={bad}/>\n\n// <p>\n//   Average {(good - bad)/(good + neutral + bad)}\n// </p>\n// <p>\n//   Postive { (good / (good + neutral +bad)) * 100} %\n// </p>\n\n//   </div>\n//  )\n// }\n\n//1.8 unicafe step 3\n\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n// const Statistics= ({text,value}) =>{\n\n//   return (\n//     <div>\n//       {text},{value}\n//     </div>\n//   )\n// }\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n\n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n\n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Statistics text={\"good\"} value={good}/>\n// <Statistics text={\"neutral\"} value={neutral}/>\n// <Statistics text={\"bad\"} value={bad}/>\n\n// <p>\n//   Average {(good - bad)/(good + neutral + bad)}\n// </p>\n// <p>\n//   Postive { (good / (good + neutral +bad)) * 100} %\n// </p>\n\n//   </div>\n//  )\n// }\n\n//1.9 unicafe step 4\n//1.9 unicafe step 4\n\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n// const Statistics= ({good, neutral, bad}) =>{\n//   if (good === 0 && neutral === 0 && bad === 0){\n//     return(\n//     <p>\n\n//       No feedback given\n\n//     </p>\n//     )\n//     }\n//     else{\n//   return (\n//     <div>\n//       <p>good,{good}</p>\n//       <p>neutral,{neutral}</p>\n//       <p>bad,{bad}</p>\n//     </div>\n//   )\n// }\n// }\n\n// const Display = ({good,neutral,bad}) =>{\n//   if (good === 0 && neutral === 0 && bad === 0){\n//     return(\n//     <p>\n//     </p>\n//     )\n//     }\n//     else{\n//     return(\n//       <div>\n//       <p>\n//       Average {(good - bad)/(good + neutral + bad)}\n//     </p>\n\n//     <p>\n//     Postive { (good / (good + neutral +bad)) * 100} %\n//     </p>\n//     </div>\n//     )\n// }\n// }\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n\n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n\n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Statistics text={\"good\"} good={good} neutral={neutral} bad={bad}/>\n\n// <Display good = {good} bad = {bad} neutral = {neutral}/>\n\n//   </div>\n//  )\n// }\n\n//1.10 unicafe step 5\n//1.10 unicafe step 5\n\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n// const Statistics = ({good,neutral,bad}) => {\n//   //console.log(`props.a: ${props.a}, props.n: ${props.n}, props.b: ${props.b}`);\n//   if (good === 0 && neutral === 0 && bad === 0) {\n//     return (\n//       <p>\n//         No Feedback Given\n//       </p>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <StatisticLine text=\"good\" value={good} />\n//         <StatisticLine text=\"neutral\" value={neutral} />\n//         <StatisticLine text=\"bad\" value={bad} />\n//       </div>\n//     );\n//   }\n// };\n\n// const StatisticLine = ({text,value}) =>{\n//   return (\n//     <div>\n//        {text},{value}\n//     </div>\n//    )\n\n// }\n\n// const Display = ({good,neutral,bad}) =>{\n//   if (good !== 0 && neutral !== 0 && bad !== 0){\n//       return(\n//         <div>\n//         <p>\n//         Average {(good - bad)/(good + neutral + bad)}\n//       </p>\n\n//       <p>\n//       Postive { (good / (good + neutral +bad)) * 100} %\n//       </p>\n//       </div>\n//       )\n// }\n// }\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n\n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n\n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Statistics good = {good} bad = {bad} neutral = {neutral}/>\n\n// <Display good = {good} bad = {bad} neutral = {neutral}/>\n\n//   </div>\n//  )\n// }\n\n//1.11\n//1.11\n//1.11\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = ({\n  click,\n  text\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: click,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 424,\n    columnNumber: 5\n  }, this);\n};\n_c = Button;\nconst Statistics = ({\n  good,\n  neutral,\n  bad\n}) => {\n  //console.log(`props.a: ${props.a}, props.n: ${props.n}, props.b: ${props.b}`);\n  if (good === 0 && neutral === 0 && bad === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Feedback Given\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(StatisticLine, {\n                text: \"good\",\n                value: good\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(StatisticLine, {\n                text: \"neutral\",\n                value: neutral\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(StatisticLine, {\n                text: \"bad\",\n                value: bad\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(StatisticLine, {\n                text: \"all\",\n                value: good + neutral + bad\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 5\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 3\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(Display, {\n                good: good,\n                bad: bad,\n                neutral: neutral\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this);\n  }\n};\n_c2 = Statistics;\nconst StatisticLine = ({\n  text,\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [text, \"  \", value]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 482,\n    columnNumber: 5\n  }, this);\n};\n_c3 = StatisticLine;\nconst Display = ({\n  good,\n  neutral,\n  bad\n}) => {\n  if (good !== 0 && neutral !== 0 && bad !== 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Average \", (good - bad) / (good + neutral + bad)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Postive \", good / (good + neutral + bad) * 100, \" %\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 9\n    }, this);\n  }\n};\n_c4 = Display;\nconst App = () => {\n  _s();\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const GoodClick = () => {\n    setGood(good + 1);\n  };\n  const NeutralClick = () => {\n    setNeutral(neutral + 1);\n  };\n  const BadClick = () => {\n    setBad(bad + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Give Feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        click: GoodClick,\n        text: \"good\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        click: NeutralClick,\n        text: \"neutral\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        click: BadClick,\n        text: \"bad\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      bad: bad,\n      neutral: neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 527,\n    columnNumber: 3\n  }, this);\n};\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n_c5 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Statistics\");\n$RefreshReg$(_c3, \"StatisticLine\");\n$RefreshReg$(_c4, \"Display\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Button","click","text","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","Statistics","good","neutral","bad","StatisticLine","value","Display","_c2","_c3","_c4","App","_s","setGood","setNeutral","setBad","GoodClick","NeutralClick","BadClick","style","display","_c5","$RefreshReg$"],"sources":["/home/guquan/summer_school/part_1/unicafe/src/App.js"],"sourcesContent":["\n//1.6\n// const Button = ({onclick,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={onclick}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n\n// const Display = ({text, value}) =>{\n//   return(\n//     <div>\n//       {text}, {value}\n//     </div>\n//   )\n    \n// }\n\n// const App  = () => {\n//   const [good ,setGood] = useState(0)\n//   const [neutral, setNeutral] = useState(0)\n//   const [bad, setBad] = useState(0)\n  \n//   const goodClick = ()=>{\n//     setGood(good + 1)\n\n//   }\n\n\n//   const neutralClick = () =>{\n//     setNeutral(neutral + 1)\n//   }\n\n//   const badClick = () =>{\n//     setBad(bad + 1)\n//   }\n\n\n//   return(\n//     <div>\n//       <h1>\n//         Give Feedback\n//       </h1>\n\n//       <Button onclick={goodClick} text={\"good\"}/>\n//       <Button onclick={neutralClick} text={\"neutral\"}/>\n//       <Button onclick={badClick} text={\"bad\"}/>\n      \n//       <h1>\n//         Statistics\n//       </h1>\n//       <Display text = {\"good\"} value = {good}/>\n//       <Display text = {\"neutral\"} value = {neutral}/>\n//       <Display text = {\"bad\"} value = {bad}/>\n//     </div>\n//   )\n\n\n// }\n\n//1.7 unicafe step 2\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n\n// const Display = ({text,value}) =>{\n\n//   return (\n//     <div>\n//       {text},{value}\n//     </div>\n//   )\n// }\n\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n    \n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n    \n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Display text={\"good\"} value={good}/>\n// <Display text={\"neutral\"} value={neutral}/>\n// <Display text={\"bad\"} value={bad}/>\n\n\n// <p>\n//   Average {(good - bad)/(good + neutral + bad)}\n// </p>\n// <p>\n//   Postive { (good / (good + neutral +bad)) * 100} %\n// </p>\n\n\n//   </div>\n//  )\n// }\n\n\n\n//1.8 unicafe step 3\n\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n\n// const Statistics= ({text,value}) =>{\n\n//   return (\n//     <div>\n//       {text},{value}\n//     </div>\n//   )\n// }\n\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n    \n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n    \n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Statistics text={\"good\"} value={good}/>\n// <Statistics text={\"neutral\"} value={neutral}/>\n// <Statistics text={\"bad\"} value={bad}/>\n\n\n// <p>\n//   Average {(good - bad)/(good + neutral + bad)}\n// </p>\n// <p>\n//   Postive { (good / (good + neutral +bad)) * 100} %\n// </p>\n\n\n//   </div>\n//  )\n// }\n\n\n\n//1.9 unicafe step 4\n//1.9 unicafe step 4\n\n\n\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n\n// const Statistics= ({good, neutral, bad}) =>{\n//   if (good === 0 && neutral === 0 && bad === 0){\n//     return(\n//     <p>\n\n//       No feedback given\n\n//     </p>\n//     )\n//     }\n//     else{\n//   return (\n//     <div>\n//       <p>good,{good}</p>\n//       <p>neutral,{neutral}</p>\n//       <p>bad,{bad}</p>\n//     </div>\n//   )\n// }\n// }\n\n\n// const Display = ({good,neutral,bad}) =>{\n//   if (good === 0 && neutral === 0 && bad === 0){\n//     return(\n//     <p>\n//     </p>\n//     )\n//     }\n//     else{\n//     return(\n//       <div>\n//       <p>\n//       Average {(good - bad)/(good + neutral + bad)}\n//     </p>\n    \n    \n//     <p>\n//     Postive { (good / (good + neutral +bad)) * 100} %\n//     </p>\n//     </div>\n//     )\n// }\n// }\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n    \n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n    \n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Statistics text={\"good\"} good={good} neutral={neutral} bad={bad}/>\n\n// <Display good = {good} bad = {bad} neutral = {neutral}/>\n\n//   </div>\n//  )\n// }\n\n\n\n\n//1.10 unicafe step 5\n//1.10 unicafe step 5\n\n\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n// const Statistics = ({good,neutral,bad}) => {\n//   //console.log(`props.a: ${props.a}, props.n: ${props.n}, props.b: ${props.b}`);\n//   if (good === 0 && neutral === 0 && bad === 0) {\n//     return (\n//       <p>\n//         No Feedback Given\n//       </p>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <StatisticLine text=\"good\" value={good} />\n//         <StatisticLine text=\"neutral\" value={neutral} />\n//         <StatisticLine text=\"bad\" value={bad} />\n//       </div>\n//     );\n//   }\n// };\n\n\n// const StatisticLine = ({text,value}) =>{\n//   return (\n//     <div>\n//        {text},{value}\n//     </div>\n//    )\n\n// }\n\n// const Display = ({good,neutral,bad}) =>{\n//   if (good !== 0 && neutral !== 0 && bad !== 0){\n//       return(\n//         <div>\n//         <p>\n//         Average {(good - bad)/(good + neutral + bad)}\n//       </p>\n      \n      \n//       <p>\n//       Postive { (good / (good + neutral +bad)) * 100} %\n//       </p>\n//       </div>\n//       )\n// }\n// }\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n    \n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n    \n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Statistics good = {good} bad = {bad} neutral = {neutral}/>\n\n// <Display good = {good} bad = {bad} neutral = {neutral}/>\n\n//   </div>\n//  )\n// }\n\n//1.11\n//1.11\n//1.11\nimport { useState } from \"react\";\nconst Button = ({click,text}) =>{\n  return(\n    <div>\n      <button onClick={click}>\n        {text}\n      </button>\n    </div>\n  )\n}\n\nconst Statistics = ({good,neutral,bad}) => {\n  //console.log(`props.a: ${props.a}, props.n: ${props.n}, props.b: ${props.b}`);\n  if (good === 0 && neutral === 0 && bad === 0) {\n    return (\n      <p>\n        No Feedback Given\n      </p>\n    );\n  } else {\n    return (\n      <div>\n        <table>\n          <tbody>\n            <tr>\n              <td>\n              <StatisticLine text=\"good\" value={good} />\n              </td>\n            </tr>\n            <tr>\n              <td>\n              <StatisticLine text=\"neutral\" value={neutral} />\n              </td>\n            </tr>\n            <tr>\n              <td>\n              <StatisticLine text=\"bad\" value={bad} />\n              </td>\n            </tr>\n<tr>\n  <td>\n    <StatisticLine text = \"all\" value= {good + neutral + bad }/>\n  </td>\n</tr>\n            <tr>\n              <td>\n              <Display good = {good} bad = {bad} neutral = {neutral}/>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        \n\n      </div>\n    );\n  }\n};\n\n\nconst StatisticLine = ({text,value}) =>{\n  return (\n    <div>\n       {text}  {value}\n    </div>\n   )\n\n}\n\nconst Display = ({good,neutral,bad}) =>{\n  if (good !== 0 && neutral !== 0 && bad !== 0){\n      return(\n        <div>\n        <p>\n        Average {(good - bad)/(good + neutral + bad)}\n      </p>\n      \n      \n      <p>\n      Postive { (good / (good + neutral +bad)) * 100} %\n      </p>\n      </div>\n      )\n}\n}\n\nconst App = () =>{\n const [good, setGood] = useState(0)\n const [neutral, setNeutral] = useState(0)\n const [bad, setBad] = useState(0)\n\n const GoodClick = () => {\n  setGood(good + 1)\n }\n\n const NeutralClick = () =>{\n  setNeutral(neutral + 1)\n }\n\n\n const BadClick = () =>{\n  setBad(bad + 1)\n }\n\n\n\n return(\n  <div>\n    <h1>\n      Give Feedback\n    </h1>\n\n    <div style={{ display: 'flex' }}>  \n      <Button click={GoodClick} text={\"good\"}/>\n      <Button click={NeutralClick} text={\"neutral\"}/>\n      <Button click={BadClick} text={\"bad\"}/>\n    </div>\n\n    <h1>\n      Statistics\n    </h1>\n\n<Statistics good = {good} bad = {bad} neutral = {neutral}/>\n\n  </div>\n )\n}\n\nexport default App"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAE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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}