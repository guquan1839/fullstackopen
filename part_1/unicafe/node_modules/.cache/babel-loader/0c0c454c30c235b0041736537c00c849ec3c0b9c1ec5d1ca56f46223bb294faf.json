{"ast":null,"code":"var _jsxFileName = \"/home/guquan/summer_school/h1_8-1_14/src/App.js\",\n  _s = $RefreshSig$();\n//1.3-------------------------------------------------------------------------\n\n//import { click } from \"@testing-library/user-event/dist/click\";\nimport { useState } from \"react\";\n\n// import { useState } from \"react\";\n\n// const App = () => {\n//   const course = 'Half Stack application development'\n//   const part1 = {\n//     name: 'Fundamentals of React',\n//     exercises: 10\n//   }\n//   const part2 = {\n//     name: 'Using props to pass data',\n//     exercises: 7\n//   }\n//   const part3 = {\n//     name: 'State of a component',\n//     exercises: 14\n//   }\n\n//   return (\n//     <div>\n//       <p>{course}</p>\n//       <p>\n//         {part1.name}{part1.exercises}\n//       </p>\n//       <p>\n//         {part2.name}{part2.exercises}\n//       </p>\n//       <p>\n//         {part3.name}{part3.exercises}\n//       </p>\n//       <p>\n//       Number of exercises {part1.exercises + part2.exercises + part3.exercises}\n//       </p>\n//     </div>\n//   )\n// }\n\n//1.4-------------------------------------------------------------------------\n\n// const Header = (c) => {\n//   return(\n//     <div>\n//       <p>\n//         {c.course}\n//       </p>\n//     </div>\n//   )\n// }\n\n// const Content = (p) =>{\n//   return(\n//     <div>\n//         <p>{p.parts[0].name}{p.parts[0].exercises}</p>\n//         <p>{p.parts[1].name}{p.parts[1].exercises}</p>\n//         <p>{p.parts[2].name}{p.parts[2].exercises}</p>\n//     </div>\n//   )\n// }\n\n// const Total = (to) =>{\n//   return(\n//     <div>\n// <p>\n//   {to.parts[0].exercises + to.parts[1].exercises + to.parts[2].exercises}\n// </p>\n//     </div>\n//   )\n\n// }\n\n// const App=()=>{\n//   const course = \"Half Stack application development\"\n//   const parts = [\n//     {\n//       name: \"fundamentals of react\",\n//       exercises: 10\n//     },\n//     {\n//       name:\"using props to pass data\",\n//       exercises: 7\n//     },\n//     {\n//       name: \"state of a component\",\n//       exercises: 14\n//     }\n//   ]\n\n//   // parts.map\n//   return(\n//     <div>\n//       <Header  course = {course}/>\n//       <Content parts = {parts}/>\n//       <Total parts = {parts}/>\n\n//     </div>\n//   )\n// }\n\n//1.5-------------------------------------------------------------------------\n\n// const Header = (c) => {\n//   return(\n//     <div>\n//       <p>\n//         {c.course.name}\n//       </p>\n//     </div>\n//   )\n// }\n\n// const Content = (p) =>{\n//   return(\n//     <div>\n//         <p>{p.parts[0].name}{p.parts[0].exercises}</p>\n//         <p>{p.parts[1].name}{p.parts[1].exercises}</p>\n//         <p>{p.parts[2].name}{p.parts[2].exercises}</p>\n//     </div>\n//   )\n// }\n\n// const Total = (to) =>{\n//   return(\n//     <div>\n// <p>\n//   {to.parts[0].exercises + to.parts[1].exercises + to.parts[2].exercises}\n// </p>\n//     </div>\n//   )\n// }\n\n// const App = () => {\n//   const course = {\n//     name: 'Half Stack application development',\n//     parts: [\n//       {\n//         name: 'Fundamentals of React',\n//         exercises: 10\n//       },\n//       {\n//         name: 'Using props to pass data',\n//         exercises: 7\n//       },\n//       {\n//         name: 'State of a component',\n//         exercises: 14\n//       }\n//     ]\n//   }\n\n//   return (\n//     <div>\n//     <Header  course = {course}/>\n//     <Content parts = {course.parts}/>\n//     <Total parts = {course.parts}/>\n//     </div>\n//   )\n// }\n//\n\n//组件状态，事态处理\n\n// const Hello = (props) => {\n\n//   const bornYear = () =>{\n//     const yearNow = new Date().getFullYear()\n//     return yearNow - props.age\n//   }\n//如果我们仔细检查当前的代码，我们会发现这个辅助是定义在另外一个函数里面的，这个函数定义了我们组件的行为。\n//在javascript中，在函数中定义函数是非常常规的操作\n\n//   return (\n//     <div>\n//       <p>\n//         Hello {props.name}, you are {props.age} years old\n//       </p>\n\n//       <p>So you were probably born in {bornYear()}</p>\n//     </div>\n//   )\n\n// }\n\n// const App = () => {\n//   const name = 'Peter'\n//   const age = 10\n\n//   return (\n//     <div>\n//       <h1>Greetings</h1>\n//       <Hello name=\"Maya\" age={26 + 10} />\n//       <Hello name={name} age={age} />\n//     </div>\n//   )\n// }\n\n//destructing\n//Javascript=>destructive 解构取值\n//解构使得变量的赋值更加容易\n\n// const Hello = (props) => {\n//   const {name,age} = props\n//   const bornYear = () => new Date().getFullYear() - age\n\n//   return(\n//     <div>\n//       <p>\n//         Hello {name}, you are {age} years old \n//       </p>\n\n//       <p>\n//         so you were probably born in {bornYear()}\n//       </p>\n//     </div>\n\n//   )\n// }\n\n//\n\n// const Hello = ({name , age}) =>{\n//   const bornYear = () => new Date().getFullYear() - age\n//   return(\n//     <div>\n//       <p>\n//         Hello {name}, you are {age} years old\n//       </p>\n\n//       <p>\n//         so you were probably born in {bornYear()}\n//       </p>\n//     </div>\n//   )\n\n// }\n\n//页面的重新渲染！\n//前面的页面都是在最初的渲染之后，外观不在变化。下面将构建一个计数器，其值随着时间的推移或者点击按钮而增加\n\n// const App = (props) =>{\n//   const {counter} = props\n//   return(\n//     <div>{counter}</div>\n//   )\n// }\n\n//stateful component\n\n// import { useState } from \"react\";\n// const App = () =>{\n// //当修改状态的函数setCounter被调用时，React重新渲染组件，这意味着组件函数的函数体被重新执行\n//   const [counter ,setCounter] = useState(0)\n\n//   setTimeout(()=>setCounter(counter + 1),\n//   1000\n// )\n//   return(\n//     <div>{counter}</div>\n//   )\n\n// }\n\n//event handling (事件处理)\n//下面是在react中，为点击事件注册一个时间处理函数。\n// import { useState } from \"react\";\n// const App = () =>{\n//   const [counter, setCounter] = useState(0)\n\n//   const handleClick = () =>{\n//     console.log(\"clicked\")\n//   }\n// //下面代码将onclick属性的值设定为对代码中定义的handleclick函数的引用\n// //现在我们每点击plus一次，handleclick函数就将被调用一次。这意味着每次点击事件都会向浏览器控制台记录一个clicked信息\n//   return(\n//     <div>\n//       <div>\n//         {counter}\n//       </div>\n\n//       <button onClick={handleClick}>\n//         plus\n//       </button>\n//     </div>\n//   )\n// }\n\n// import { useState } from \"react\";\n// //除此之外，事件处理函数也可以直接在OnClick-attribute的赋值中定义\n// const App = () =>{\n//   const [counter, setCounter] = useState(0)\n\n// return(\n//   <div>\n//     <div>\n//       {counter}\n//     </div>\n//     <button onClick={()=>console.log('clicked')}>\n\n//       plus\n\n//     </button>\n//   </div>\n// )\n// }\n\n//那下面如何实现点击增加状态数字呢？\n// import { useState } from \"react\";\n// const App = () =>{\n//   const [Counter, setCounter] = useState(0)\n\n// return(\n//   <div>\n//     <div>\n//       {Counter}\n//     </div>\n//     <button onClick={()=>setCounter(Counter + 1)}>\n//       plus\n//     </button>\n//   </div>\n// )\n\n// }\n\n//下面我们再实现一个重设的功能！\n\n// import {useState} from \"react\"\n// const App = () =>{\n//   const [counter, setCounter] = useState(0)\n\n//   return(\n//     <div>\n//       <div>{counter}</div>\n//       <button onClick={() => setCounter(counter + 1)}>\n//         plus\n//       </button>\n\n//       <button onClick={() => setCounter(0)}>\n//         ZERO\n//       </button>\n//     </div>\n//   )\n\n// }\n\n//event handle is a function\n//下面为按钮定于事件处理程序，并且是以更简单的方法！\n//注意:当去除  \"() =>\" 这部分内容时。程序会报错。\n//该事件处理程序实际上是一个函数调用。在很多情况下这是可以的，但在这种特殊情况下就不行了。在一开始，Counter变量的值是0.当react第一\n//次渲染组件时，它指向了函数调用setCounter(0+1),并将组件的状态值改为1.\n\n//这将导致该组件被重新渲染，react将再次执行setcounter函数调用，并且状态改变，导致再次重新渲染。\n\n// <button onClick={() => setCounter(counter + 1)}>\n//   plus\n// </button>\n\n//下面，我们把事件处理程序分成独立的函数\n//import {useState} from \"react\";\n// const App = () =>{\n//   const [counter, setCounter] = useState(0)\n\n//   const increasebyone = () => setCounter(counter + 1)\n//   const setTozero = () => setCounter(0)\n\n//   return(\n//     <div>\n\n//     <div>\n//       {counter}\n//     </div>\n\n//     <button onClick={increasebyone}>\n//       plus\n//     </button>\n\n//     <button onClick={setTozero}>\n//       zero\n//     </button>\n//     </div>\n//   )\n// }\n\n//Passing state to child components\n// const Display = (props) => {\n//   return(\n//     <div>{props.counter}</div>\n//   )\n// }\n\n// const Button = (props) =>{\n//   return(\n//     <button onClick={props.onClick}>\n//       {props.text}\n//     </button>\n//   )\n// }\n\n// const App = () =>{\n//   const [counter, setCounter] = useState(0)\n\n//   const increasebyone = () => setCounter(counter + 1)\n//   const decreasebyone  = () => setCounter(counter - 1)\n//   const setTozero = () => setCounter(0)\n\n// return(\n//   <div>\n//     <Display counter = {counter}/>\n\n//     <Button onClick = {increasebyone} text = 'plus'/>\n\n//     <Button onClick = {setTozero} text = 'zero'/>\n\n//     <Button onClick = {decreasebyone} text = 'minus'/>\n\n//   </div>\n// )\n// }\n\n//Changes in state cause rerendering\n\n//首先回顾工作的顺序和原则:(原文)\n//当应用启动时，App.js中的代码被执行。这段代码使用一个usestate钩子来创建应用的状态，设置变量counter的初始值。\n//这个组件包含display组件--显示计数器的值0和3个button组件。这些按钮都有事件处理程序，用来改变计数器的状态。\n//当其中一个按钮被点击时，事件处理程序被执行。该事件处理程序通过setCounter函数改变App.js组件的状态。\n\n//注意:调用一个改变状态的函数会导致组件重新渲染。\n//所以，如果用户点击了Plus按钮，按钮的事件处理程序将counter的值改为1，并且App组件被重新渲染。这导致了其子组件Display和Button也被重新渲染。\n//Display接受计数器的新值,1,作为prop。Button组件接受事件处理程序，可以用来改变计数器的状态。\n\n//refactoring components\n//这部分其实就是讲重构组件,让组件更简洁！\n//之前:\n// const Display = (props) =>{\n//   return(\n//     <div>{propes.counter}</div>\n//   )\n// }\n\n//修改以后:\n// const Display = ({counter}) =>{\n//   return(\n//     <div>{counter}</div>\n//   )\n// }\n\n//最终版本 const Display = ({counter}) => <div>{counter}</div>\n\n//除此之外，还可以优化button组件\n\n// const Button = (props) =>{\n//   return (\n//     <div>\n//       <button onClick={props.onClick}>\n//         {props.text}\n//       </button>\n//     </div>\n//   )\n// }\n\n//const Button = ({onclick, text}) = >{\n//<button onClick = {onclick}>\n//{text}\n//</button>\n//}\n\n// const Button = ({onSmash, text}) =><button onClick={onSmash}></button>\n\n//深入react 应用调试\n//A note on react version: (修改react版本)\n// 第一步: 修改package.json文件\n//第二步: 在终端运行npm install\n//注意:我们还需要修改import头(index.js)\n\n//complex state：\n//在大多数情况下，最简单和最好的方法是通过多次使用usestate函数来独立创建独立的状态 '片段'\n//在下面中我们创建了两个状态片段。\n\n// const App =()=>{\n//   const [left, setleft] = useState(0)\n//   const [right,setright] = useState(0)\n\n//   return(\n//     <div>\n//       {left}\n//       <button onClick={() => setleft(left+1)}>\n//         left\n//       </button>\n\n//       <button onClick={() => setright(right +1)}>\n//         right\n//       </button>\n//       {right}\n//     </div>\n//   )\n// }\n\n//组件的状态或其状态的一部分可以是任何类型。 我们可以通过将left和right按钮的点击次数保存在一个对象中来实现同样的功能\n// {\n//   left:0,\n//   right:0\n// }\n\n// const App = () =>{\n//   const [clicks, setclicks] = useState({left:0,right:0})\n\n//   const handleLeftClick = () =>{\n//     const newClicks = {\n//       left: clicks.left +1,\n//       right: clicks.right\n//     }\n\n//     setclicks(newClicks)\n//   }\n\n//   const handleRightClick = () =>{\n//     const newClicks = {\n//       left: clicks.left,\n//       right: clicks.right + 1\n//     }\n\n//     setclicks(newClicks)\n//   }\n\n//   return(\n//     <div>\n//       {clicks.left}\n//       <button onClick={handleLeftClick}>\n//         left\n//       </button>\n\n//       <button onClick={handleRightClick}>\n//         right\n//       </button>\n\n//       {clicks.right}\n//     </div>\n//   )\n// }\n\n//下面使用对象传播来更加整齐地定义新的状态对象\n//{...clicks, right:clicks.right + 1}\n\n//const handleLeftclick = () =>\n//setClicks({...clicks,left:clicks.left +1 })\n//const handleRightClick = () =>\n//setClicks({...clicks, right: clicks.right + 1})\n\n//Handling arrays \n//下面给应用添加一个状态，其中包含一个数组allClicks，用于记录应用中发生的每一次点击。\n\n// const App = () =>{\n//   const [left, setleft] = useState(0)\n//   const [right, setright] = useState(0)\n//   const [allClicks, setAll] = useState([])\n\n//   const handleLeftClick = () =>{\n//     setAll(allClicks.concat('L'))\n//     setleft(left +1)\n//   }\n\n//   const handleRightClick = () =>{\n//     setAll(allClicks.concat('R'))\n//     setright(right + 1)\n//   }\n// return(\n//   <div>\n//     {left}\n//     <button onClick={handleLeftClick}>\n//       left\n//     </button>\n\n// <button onClick={handleRightClick}>\n//   right\n// </button>\n// {right}\n\n// <p>\n//   {allClicks.join('')}\n// </p>\n\n//   </div>\n// )\n\n// }\n\n//每次点击都被存储在一个单独的状态中，名为allClicks,初始化为一个空数组\n//const [allClicks, setAll] = useState([])\n\n//Conditional rendering\n//让我们修改我们的应用，使点击历史的渲染由一个新的History组件来处理\n//我们发现在不同的条件下History进行了不同的渲染！\n// const History = (props) =>{\n//   if(props.allClicks.length === 0){\n//     return(\n//       <div>\n//         the app is used by pressing the buttons\n//       </div>\n//     )\n//   }\n\n//   return(\n//     <div>\n//       button press history :{props.allClicks.join(' ')}\n//     </div>\n//   )\n\n// }\n\n// const Button = ({ handleClick, text }) => {\n//   return(<div>\n//   <button onClick = {handleClick}>\n//     {text}\n//   </button>\n//   </div>\n//   )\n// }\n\n// const App = () =>{\n//   const [left, setLeft] = useState(0)\n//   const [right, setright] = useState(0)\n//   const [allClicks, setAll] = useState([])\n\n//   const handleleftClick = () =>{\n//     setAll(allClicks.concat('L'))\n//     setLeft(left + 1)\n\n//   }\n\n//   const handlerightClick = () =>{\n//     setAll(allClicks.concat('R'))\n//     setright(right + 1)\n//   }\n\n//   return(\n//     <div>\n//       {left}\n//       <Button handleClick = {handleleftClick} text =\"left\"/>\n//       <Button handleClick = {handlerightClick} text = \"right\"/>\n//       {right}\n\n//       <History allClicks = {allClicks}/>\n//     </div>\n//   )\n// }\n\n//old react\n//注意我们使用的state hook方法是在16.8.0版本后启用的\n\n//Debugging React applications\n//调试React应用\n\n// const Button = ({onClick, text}) =>{\n//   <button onClick={onClick}>\n//     {text}\n//   </button>\n\n// }\n\n// const Button = (props) => {\n\n//   console.log(props)\n//   const {onClick,text} = props\n//   return(\n//     <button onClick={onClick}>\n//       {text}\n//     </button>\n//   )\n// }\n\n//NB: 注意，当我们使用console.log进行调试时，注意合理输出\n//console.log('props value is ' + props)是错的\n//console.log('props value is ', props)才是对的\n\n//Rules of Hooks\n//为了确保我们能正确使用钩子函数。我们需要注意下面的原则:\n\n//useState函数(useEffect函数)，不能从循环，条件表达式或任何不是定义组件的函数的地方调用\n//这样做是为了确保钩子总是以相同的顺序被调用，如果不是这样的话，应用将表现的不正常.\n//简而言之，钩子只能从定义了react组件的函数体内部调用。\n\n//下面是一个例子:\n\n// const App = () => {\n//   const[age, setAge] = useState(0)\n//   const[name, setName] = useState(\"xxxxxxxxxxxxxxxxxxxxxxxx\")\n\n//   if(age>10){//不能运行\n//     const [foot,setfoot] = useState(null)//这里会导致编译报错\n//   }\n\n//   for( let i=0; i<age;i++){\n//     //不能运行\n//   }\n\n//   const notGood = () =>{\n//     //不能运行\n//   }\n\n//   return(\n//     <div>\n\n//     </div>\n//   )\n// }\n\n//Event handling revisited\n//\n//假设有下面的App程序\n\n// const App = () =>{\n//   const [value, setValue] = useState(10)\n\n//   return(\n//     <div>\n//       {value}\n//       <button> //注意这里\n//         reset to zero \n//       </button>\n//     </div>\n//   )\n// }\n//我们想使用 点击按钮的方法 重置value。所以，下面我将将添加一个事件处理程序。\n//注意:事件处理程序必须始终是一个函数对另外一个函数的引用\n//字符串，变量的修改都不行！\n//最好的方法是单独搞一个事件处理函数！\n\n//Function that returns a function(主要内容忽略)\n//另外一种定义事件处理程序的方法是使用   返回函数的函数\n\n//Passing event handlers to Child components//这部分非常简单，可以省略\n//Do not Define Components within components\n\n//1.6\n// const Button = ({onclick,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={onclick}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n// const Display = ({text, value}) =>{\n//   return(\n//     <div>\n//       {text}, {value}\n//     </div>\n//   )\n\n// }\n\n// const App  = () => {\n//   const [good ,setGood] = useState(0)\n//   const [neutral, setNeutral] = useState(0)\n//   const [bad, setBad] = useState(0)\n\n//   const goodClick = ()=>{\n//     setGood(good + 1)\n\n//   }\n\n//   const neutralClick = () =>{\n//     setNeutral(neutral + 1)\n//   }\n\n//   const badClick = () =>{\n//     setBad(bad + 1)\n//   }\n\n//   return(\n//     <div>\n//       <h1>\n//         Give Feedback\n//       </h1>\n\n//       <Button onclick={goodClick} text={\"good\"}/>\n//       <Button onclick={neutralClick} text={\"neutral\"}/>\n//       <Button onclick={badClick} text={\"bad\"}/>\n\n//       <h1>\n//         Statistics\n//       </h1>\n//       <Display text = {\"good\"} value = {good}/>\n//       <Display text = {\"neutral\"} value = {neutral}/>\n//       <Display text = {\"bad\"} value = {bad}/>\n//     </div>\n//   )\n\n// }\n\n//1.7 unicafe step 2\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n// const Display = ({text,value}) =>{\n\n//   return (\n//     <div>\n//       {text},{value}\n//     </div>\n//   )\n// }\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n\n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n\n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Display text={\"good\"} value={good}/>\n// <Display text={\"neutral\"} value={neutral}/>\n// <Display text={\"bad\"} value={bad}/>\n\n// <p>\n//   Average {(good - bad)/(good + neutral + bad)}\n// </p>\n// <p>\n//   Postive { (good / (good + neutral +bad)) * 100} %\n// </p>\n\n//   </div>\n//  )\n// }\n\n//1.8 unicafe step 3\n\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n// const Statistics= ({text,value}) =>{\n\n//   return (\n//     <div>\n//       {text},{value}\n//     </div>\n//   )\n// }\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n\n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n\n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Statistics text={\"good\"} value={good}/>\n// <Statistics text={\"neutral\"} value={neutral}/>\n// <Statistics text={\"bad\"} value={bad}/>\n\n// <p>\n//   Average {(good - bad)/(good + neutral + bad)}\n// </p>\n// <p>\n//   Postive { (good / (good + neutral +bad)) * 100} %\n// </p>\n\n//   </div>\n//  )\n// }\n\n//1.9 unicafe step 4\n\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n// const Statistics= ({text,value}) =>{\n\n//   return (\n//     <div>\n//       {text},{value}\n//     </div>\n//   )\n// }\n\n// const Display = ({good,neutral,bad}) =>{\n//   if (good === 0 && neutral === 0 && bad === 0){\n//     return(\n//     <p>\n//       No Feed Given\n//     </p>\n//     )\n//     }\n//     else{\n//     return(\n//       <div>\n//       <p>\n//       Average {(good - bad)/(good + neutral + bad)}\n//     </p>\n\n//     <p>\n//     Postive { (good / (good + neutral +bad)) * 100} %\n//     </p>\n//     </div>\n//     )\n// }\n// }\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n\n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n\n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Statistics text={\"good\"} value={good}/>\n// <Statistics text={\"neutral\"} value={neutral}/>\n// <Statistics text={\"bad\"} value={bad}/>\n\n// <Display good = {good} bad = {bad} neutral = {neutral}/>\n\n//   </div>\n//  )\n// }\n\n//1.10 unicafe step 5\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = ({\n  click,\n  text\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: click,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1117,\n    columnNumber: 5\n  }, this);\n};\n_c = Button;\nconst Statistics = props => {\n  // return (\n  //   <div>\n  //     {text},{value}\n  //   </div>\n  // )\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"good\",\n      value: props.a\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"neutral\",\n      value: props.n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"bad\",\n      value: props.b\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1134,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Statistics;\nconst StatisticLine = ({\n  text,\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [text, \",\", value]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1145,\n    columnNumber: 5\n  }, this);\n};\n_c3 = StatisticLine;\nconst Display = ({\n  good,\n  neutral,\n  bad\n}) => {\n  if (good === 0 && neutral === 0 && bad === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Feedback Given\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1155,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Average \", (good - bad) / (good + neutral + bad)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1163,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Postive \", good / (good + neutral + bad) * 100, \" %\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1168,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1162,\n      columnNumber: 7\n    }, this);\n  }\n};\n_c4 = Display;\nconst App = () => {\n  _s();\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const GoodClick = () => {\n    setGood(good + 1);\n  };\n  const NeutralClick = () => {\n    setNeutral(neutral + 1);\n  };\n  const BadClick = () => {\n    setBad(bad + 1);\n  };\n  const props = {\n    a: good,\n    n: neutral,\n    b: bad\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Give Feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1204,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      click: GoodClick,\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1208,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      click: NeutralClick,\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1209,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      click: BadClick,\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1210,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1212,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"good\",\n      props: props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1216,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Display, {\n      good: good,\n      bad: bad,\n      neutral: neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1218,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1203,\n    columnNumber: 3\n  }, this);\n};\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n_c5 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Statistics\");\n$RefreshReg$(_c3, \"StatisticLine\");\n$RefreshReg$(_c4, \"Display\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Button","click","text","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","Statistics","props","StatisticLine","value","a","n","b","_c2","_c3","Display","good","neutral","bad","_c4","App","_s","setGood","setNeutral","setBad","GoodClick","NeutralClick","BadClick","_c5","$RefreshReg$"],"sources":["/home/guquan/summer_school/h1_8-1_14/src/App.js"],"sourcesContent":["//1.3-------------------------------------------------------------------------\n\n//import { click } from \"@testing-library/user-event/dist/click\";\nimport { useState } from \"react\";\n\n// import { useState } from \"react\";\n\n// const App = () => {\n//   const course = 'Half Stack application development'\n//   const part1 = {\n//     name: 'Fundamentals of React',\n//     exercises: 10\n//   }\n//   const part2 = {\n//     name: 'Using props to pass data',\n//     exercises: 7\n//   }\n//   const part3 = {\n//     name: 'State of a component',\n//     exercises: 14\n//   }\n\n//   return (\n//     <div>\n//       <p>{course}</p>\n//       <p>\n//         {part1.name}{part1.exercises}\n//       </p>\n//       <p>\n//         {part2.name}{part2.exercises}\n//       </p>\n//       <p>\n//         {part3.name}{part3.exercises}\n//       </p>\n//       <p>\n//       Number of exercises {part1.exercises + part2.exercises + part3.exercises}\n//       </p>\n//     </div>\n//   )\n// }\n\n\n//1.4-------------------------------------------------------------------------\n\n// const Header = (c) => {\n//   return(\n//     <div>\n//       <p>\n//         {c.course}\n//       </p>\n//     </div>\n//   )\n// }\n\n// const Content = (p) =>{\n//   return(\n//     <div>\n//         <p>{p.parts[0].name}{p.parts[0].exercises}</p>\n//         <p>{p.parts[1].name}{p.parts[1].exercises}</p>\n//         <p>{p.parts[2].name}{p.parts[2].exercises}</p>\n//     </div>\n//   )\n// }\n\n// const Total = (to) =>{\n//   return(\n//     <div>\n// <p>\n//   {to.parts[0].exercises + to.parts[1].exercises + to.parts[2].exercises}\n// </p>\n//     </div>\n//   )\n\n// }\n\n// const App=()=>{\n//   const course = \"Half Stack application development\"\n//   const parts = [\n//     {\n//       name: \"fundamentals of react\",\n//       exercises: 10\n//     },\n//     {\n//       name:\"using props to pass data\",\n//       exercises: 7\n//     },\n//     {\n//       name: \"state of a component\",\n//       exercises: 14\n//     }\n//   ]\n\n\n\n//   // parts.map\n//   return(\n//     <div>\n//       <Header  course = {course}/>\n//       <Content parts = {parts}/>\n//       <Total parts = {parts}/>\n\n//     </div>\n//   )\n// }\n\n\n\n//1.5-------------------------------------------------------------------------\n\n\n// const Header = (c) => {\n//   return(\n//     <div>\n//       <p>\n//         {c.course.name}\n//       </p>\n//     </div>\n//   )\n// }\n\n// const Content = (p) =>{\n//   return(\n//     <div>\n//         <p>{p.parts[0].name}{p.parts[0].exercises}</p>\n//         <p>{p.parts[1].name}{p.parts[1].exercises}</p>\n//         <p>{p.parts[2].name}{p.parts[2].exercises}</p>\n//     </div>\n//   )\n// }\n\n// const Total = (to) =>{\n//   return(\n//     <div>\n// <p>\n//   {to.parts[0].exercises + to.parts[1].exercises + to.parts[2].exercises}\n// </p>\n//     </div>\n//   )\n// }\n\n// const App = () => {\n//   const course = {\n//     name: 'Half Stack application development',\n//     parts: [\n//       {\n//         name: 'Fundamentals of React',\n//         exercises: 10\n//       },\n//       {\n//         name: 'Using props to pass data',\n//         exercises: 7\n//       },\n//       {\n//         name: 'State of a component',\n//         exercises: 14\n//       }\n//     ]\n//   }\n\n//   return (\n//     <div>\n//     <Header  course = {course}/>\n//     <Content parts = {course.parts}/>\n//     <Total parts = {course.parts}/>\n//     </div>\n//   )\n// }\n//\n\n\n//组件状态，事态处理\n\n// const Hello = (props) => {\n\n\n//   const bornYear = () =>{\n//     const yearNow = new Date().getFullYear()\n//     return yearNow - props.age\n//   }\n  //如果我们仔细检查当前的代码，我们会发现这个辅助是定义在另外一个函数里面的，这个函数定义了我们组件的行为。\n  //在javascript中，在函数中定义函数是非常常规的操作\n\n\n\n//   return (\n//     <div>\n//       <p>\n//         Hello {props.name}, you are {props.age} years old\n//       </p>\n\n//       <p>So you were probably born in {bornYear()}</p>\n//     </div>\n//   )\n\n// }\n\n// const App = () => {\n//   const name = 'Peter'\n//   const age = 10\n\n//   return (\n//     <div>\n//       <h1>Greetings</h1>\n//       <Hello name=\"Maya\" age={26 + 10} />\n//       <Hello name={name} age={age} />\n//     </div>\n//   )\n// }\n\n//destructing\n//Javascript=>destructive 解构取值\n//解构使得变量的赋值更加容易\n\n\n// const Hello = (props) => {\n//   const {name,age} = props\n//   const bornYear = () => new Date().getFullYear() - age\n\n//   return(\n//     <div>\n//       <p>\n//         Hello {name}, you are {age} years old \n//       </p>\n\n//       <p>\n//         so you were probably born in {bornYear()}\n//       </p>\n//     </div>\n\n//   )\n// }\n\n//\n\n\n// const Hello = ({name , age}) =>{\n//   const bornYear = () => new Date().getFullYear() - age\n//   return(\n//     <div>\n//       <p>\n//         Hello {name}, you are {age} years old\n//       </p>\n\n//       <p>\n//         so you were probably born in {bornYear()}\n//       </p>\n//     </div>\n//   )\n\n\n// }\n\n//页面的重新渲染！\n//前面的页面都是在最初的渲染之后，外观不在变化。下面将构建一个计数器，其值随着时间的推移或者点击按钮而增加\n\n// const App = (props) =>{\n//   const {counter} = props\n//   return(\n//     <div>{counter}</div>\n//   )\n// }\n\n\n\n//stateful component\n\n\n\n// import { useState } from \"react\";\n// const App = () =>{\n// //当修改状态的函数setCounter被调用时，React重新渲染组件，这意味着组件函数的函数体被重新执行\n//   const [counter ,setCounter] = useState(0)\n\n//   setTimeout(()=>setCounter(counter + 1),\n//   1000\n// )\n//   return(\n//     <div>{counter}</div>\n//   )\n\n// }\n\n//event handling (事件处理)\n//下面是在react中，为点击事件注册一个时间处理函数。\n// import { useState } from \"react\";\n// const App = () =>{\n//   const [counter, setCounter] = useState(0)\n\n//   const handleClick = () =>{\n//     console.log(\"clicked\")\n//   }\n// //下面代码将onclick属性的值设定为对代码中定义的handleclick函数的引用\n// //现在我们每点击plus一次，handleclick函数就将被调用一次。这意味着每次点击事件都会向浏览器控制台记录一个clicked信息\n//   return(\n//     <div>\n//       <div>\n//         {counter}\n//       </div>\n\n//       <button onClick={handleClick}>\n//         plus\n//       </button>\n//     </div>\n//   )\n// }\n\n\n// import { useState } from \"react\";\n// //除此之外，事件处理函数也可以直接在OnClick-attribute的赋值中定义\n// const App = () =>{\n//   const [counter, setCounter] = useState(0)\n\n\n// return(\n//   <div>\n//     <div>\n//       {counter}\n//     </div>\n//     <button onClick={()=>console.log('clicked')}>\n\n//       plus\n\n//     </button>\n//   </div>\n// )\n// }\n\n\n//那下面如何实现点击增加状态数字呢？\n// import { useState } from \"react\";\n// const App = () =>{\n//   const [Counter, setCounter] = useState(0)\n\n// return(\n//   <div>\n//     <div>\n//       {Counter}\n//     </div>\n//     <button onClick={()=>setCounter(Counter + 1)}>\n//       plus\n//     </button>\n//   </div>\n// )\n\n// }\n\n//下面我们再实现一个重设的功能！\n\n// import {useState} from \"react\"\n// const App = () =>{\n//   const [counter, setCounter] = useState(0)\n\n//   return(\n//     <div>\n//       <div>{counter}</div>\n//       <button onClick={() => setCounter(counter + 1)}>\n//         plus\n//       </button>\n\n\n//       <button onClick={() => setCounter(0)}>\n//         ZERO\n//       </button>\n//     </div>\n//   )\n\n// }\n\n\n//event handle is a function\n//下面为按钮定于事件处理程序，并且是以更简单的方法！\n//注意:当去除  \"() =>\" 这部分内容时。程序会报错。\n//该事件处理程序实际上是一个函数调用。在很多情况下这是可以的，但在这种特殊情况下就不行了。在一开始，Counter变量的值是0.当react第一\n//次渲染组件时，它指向了函数调用setCounter(0+1),并将组件的状态值改为1.\n\n//这将导致该组件被重新渲染，react将再次执行setcounter函数调用，并且状态改变，导致再次重新渲染。\n\n\n\n// <button onClick={() => setCounter(counter + 1)}>\n//   plus\n// </button>\n\n//下面，我们把事件处理程序分成独立的函数\n//import {useState} from \"react\";\n// const App = () =>{\n//   const [counter, setCounter] = useState(0)\n\n\n\n//   const increasebyone = () => setCounter(counter + 1)\n//   const setTozero = () => setCounter(0)\n\n\n//   return(\n//     <div>\n\n//     <div>\n//       {counter}\n//     </div>\n\n//     <button onClick={increasebyone}>\n//       plus\n//     </button>\n\n//     <button onClick={setTozero}>\n//       zero\n//     </button>\n//     </div>\n//   )\n// }\n\n\n//Passing state to child components\n// const Display = (props) => {\n//   return(\n//     <div>{props.counter}</div>\n//   )\n// }\n\n// const Button = (props) =>{\n//   return(\n//     <button onClick={props.onClick}>\n//       {props.text}\n//     </button>\n//   )\n// }\n\n// const App = () =>{\n//   const [counter, setCounter] = useState(0)\n\n//   const increasebyone = () => setCounter(counter + 1)\n//   const decreasebyone  = () => setCounter(counter - 1)\n//   const setTozero = () => setCounter(0)\n\n\n\n// return(\n//   <div>\n//     <Display counter = {counter}/>\n\n//     <Button onClick = {increasebyone} text = 'plus'/>\n\n//     <Button onClick = {setTozero} text = 'zero'/>\n\n//     <Button onClick = {decreasebyone} text = 'minus'/>\n\n\n\n//   </div>\n// )\n// }\n\n//Changes in state cause rerendering\n\n//首先回顾工作的顺序和原则:(原文)\n//当应用启动时，App.js中的代码被执行。这段代码使用一个usestate钩子来创建应用的状态，设置变量counter的初始值。\n//这个组件包含display组件--显示计数器的值0和3个button组件。这些按钮都有事件处理程序，用来改变计数器的状态。\n//当其中一个按钮被点击时，事件处理程序被执行。该事件处理程序通过setCounter函数改变App.js组件的状态。\n\n\n\n//注意:调用一个改变状态的函数会导致组件重新渲染。\n//所以，如果用户点击了Plus按钮，按钮的事件处理程序将counter的值改为1，并且App组件被重新渲染。这导致了其子组件Display和Button也被重新渲染。\n//Display接受计数器的新值,1,作为prop。Button组件接受事件处理程序，可以用来改变计数器的状态。\n\n\n\n//refactoring components\n//这部分其实就是讲重构组件,让组件更简洁！\n//之前:\n// const Display = (props) =>{\n//   return(\n//     <div>{propes.counter}</div>\n//   )\n// }\n\n//修改以后:\n// const Display = ({counter}) =>{\n//   return(\n//     <div>{counter}</div>\n//   )\n// }\n\n//最终版本 const Display = ({counter}) => <div>{counter}</div>\n\n//除此之外，还可以优化button组件\n\n// const Button = (props) =>{\n//   return (\n//     <div>\n//       <button onClick={props.onClick}>\n//         {props.text}\n//       </button>\n//     </div>\n//   )\n// }\n\n//const Button = ({onclick, text}) = >{\n//<button onClick = {onclick}>\n//{text}\n//</button>\n//}\n\n\n// const Button = ({onSmash, text}) =><button onClick={onSmash}></button>\n\n\n//深入react 应用调试\n//A note on react version: (修改react版本)\n// 第一步: 修改package.json文件\n//第二步: 在终端运行npm install\n//注意:我们还需要修改import头(index.js)\n\n\n//complex state：\n//在大多数情况下，最简单和最好的方法是通过多次使用usestate函数来独立创建独立的状态 '片段'\n//在下面中我们创建了两个状态片段。\n\n// const App =()=>{\n//   const [left, setleft] = useState(0)\n//   const [right,setright] = useState(0)\n\n//   return(\n//     <div>\n//       {left}\n//       <button onClick={() => setleft(left+1)}>\n//         left\n//       </button>\n\n//       <button onClick={() => setright(right +1)}>\n//         right\n//       </button>\n//       {right}\n//     </div>\n//   )\n// }\n\n//组件的状态或其状态的一部分可以是任何类型。 我们可以通过将left和right按钮的点击次数保存在一个对象中来实现同样的功能\n// {\n//   left:0,\n//   right:0\n// }\n\n// const App = () =>{\n//   const [clicks, setclicks] = useState({left:0,right:0})\n\n\n\n//   const handleLeftClick = () =>{\n//     const newClicks = {\n//       left: clicks.left +1,\n//       right: clicks.right\n//     }\n\n//     setclicks(newClicks)\n//   }\n\n\n//   const handleRightClick = () =>{\n//     const newClicks = {\n//       left: clicks.left,\n//       right: clicks.right + 1\n//     }\n\n\n//     setclicks(newClicks)\n//   }\n\n\n//   return(\n//     <div>\n//       {clicks.left}\n//       <button onClick={handleLeftClick}>\n//         left\n//       </button>\n\n//       <button onClick={handleRightClick}>\n//         right\n//       </button>\n\n//       {clicks.right}\n//     </div>\n//   )\n// }\n\n//下面使用对象传播来更加整齐地定义新的状态对象\n//{...clicks, right:clicks.right + 1}\n\n//const handleLeftclick = () =>\n  //setClicks({...clicks,left:clicks.left +1 })\n//const handleRightClick = () =>\n  //setClicks({...clicks, right: clicks.right + 1})\n\n\n//Handling arrays \n//下面给应用添加一个状态，其中包含一个数组allClicks，用于记录应用中发生的每一次点击。\n\n\n\n// const App = () =>{\n//   const [left, setleft] = useState(0)\n//   const [right, setright] = useState(0)\n//   const [allClicks, setAll] = useState([])\n\n\n//   const handleLeftClick = () =>{\n//     setAll(allClicks.concat('L'))\n//     setleft(left +1)\n//   }\n\n//   const handleRightClick = () =>{\n//     setAll(allClicks.concat('R'))\n//     setright(right + 1)\n//   }\n// return(\n//   <div>\n//     {left}\n//     <button onClick={handleLeftClick}>\n//       left\n//     </button>\n\n// <button onClick={handleRightClick}>\n//   right\n// </button>\n// {right}\n\n// <p>\n//   {allClicks.join('')}\n// </p>\n\n\n\n//   </div>\n// )\n\n\n// }\n\n\n//每次点击都被存储在一个单独的状态中，名为allClicks,初始化为一个空数组\n//const [allClicks, setAll] = useState([])\n\n\n//Conditional rendering\n//让我们修改我们的应用，使点击历史的渲染由一个新的History组件来处理\n//我们发现在不同的条件下History进行了不同的渲染！\n// const History = (props) =>{\n//   if(props.allClicks.length === 0){\n//     return(\n//       <div>\n//         the app is used by pressing the buttons\n//       </div>\n//     )\n//   }\n\n//   return(\n//     <div>\n//       button press history :{props.allClicks.join(' ')}\n//     </div>\n//   )\n\n\n\n// }\n\n\n// const Button = ({ handleClick, text }) => {\n//   return(<div>\n//   <button onClick = {handleClick}>\n//     {text}\n//   </button>\n//   </div>\n//   )\n// }\n\n// const App = () =>{\n//   const [left, setLeft] = useState(0)\n//   const [right, setright] = useState(0)\n//   const [allClicks, setAll] = useState([])\n\n//   const handleleftClick = () =>{\n//     setAll(allClicks.concat('L'))\n//     setLeft(left + 1)\n\n//   }\n\n//   const handlerightClick = () =>{\n//     setAll(allClicks.concat('R'))\n//     setright(right + 1)\n//   }\n\n//   return(\n//     <div>\n//       {left}\n//       <Button handleClick = {handleleftClick} text =\"left\"/>\n//       <Button handleClick = {handlerightClick} text = \"right\"/>\n//       {right}\n\n//       <History allClicks = {allClicks}/>\n//     </div>\n//   )\n// }\n\n\n//old react\n//注意我们使用的state hook方法是在16.8.0版本后启用的\n\n\n\n//Debugging React applications\n//调试React应用\n\n// const Button = ({onClick, text}) =>{\n//   <button onClick={onClick}>\n//     {text}\n//   </button>\n\n// }\n\n\n// const Button = (props) => {\n\n//   console.log(props)\n//   const {onClick,text} = props\n//   return(\n//     <button onClick={onClick}>\n//       {text}\n//     </button>\n//   )\n// }\n\n\n//NB: 注意，当我们使用console.log进行调试时，注意合理输出\n//console.log('props value is ' + props)是错的\n//console.log('props value is ', props)才是对的\n\n\n\n//Rules of Hooks\n//为了确保我们能正确使用钩子函数。我们需要注意下面的原则:\n\n//useState函数(useEffect函数)，不能从循环，条件表达式或任何不是定义组件的函数的地方调用\n//这样做是为了确保钩子总是以相同的顺序被调用，如果不是这样的话，应用将表现的不正常.\n//简而言之，钩子只能从定义了react组件的函数体内部调用。\n\n\n//下面是一个例子:\n\n// const App = () => {\n//   const[age, setAge] = useState(0)\n//   const[name, setName] = useState(\"xxxxxxxxxxxxxxxxxxxxxxxx\")\n\n//   if(age>10){//不能运行\n//     const [foot,setfoot] = useState(null)//这里会导致编译报错\n//   }\n\n//   for( let i=0; i<age;i++){\n//     //不能运行\n//   }\n\n//   const notGood = () =>{\n//     //不能运行\n//   }\n\n\n//   return(\n//     <div>\n\n//     </div>\n//   )\n// }\n\n\n//Event handling revisited\n//\n//假设有下面的App程序\n\n// const App = () =>{\n//   const [value, setValue] = useState(10)\n\n\n//   return(\n//     <div>\n//       {value}\n//       <button> //注意这里\n//         reset to zero \n//       </button>\n//     </div>\n//   )\n// }\n//我们想使用 点击按钮的方法 重置value。所以，下面我将将添加一个事件处理程序。\n//注意:事件处理程序必须始终是一个函数对另外一个函数的引用\n//字符串，变量的修改都不行！\n//最好的方法是单独搞一个事件处理函数！\n\n\n\n//Function that returns a function(主要内容忽略)\n//另外一种定义事件处理程序的方法是使用   返回函数的函数\n\n\n\n//Passing event handlers to Child components//这部分非常简单，可以省略\n//Do not Define Components within components\n\n\n\n\n\n\n//1.6\n// const Button = ({onclick,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={onclick}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n\n// const Display = ({text, value}) =>{\n//   return(\n//     <div>\n//       {text}, {value}\n//     </div>\n//   )\n    \n// }\n\n// const App  = () => {\n//   const [good ,setGood] = useState(0)\n//   const [neutral, setNeutral] = useState(0)\n//   const [bad, setBad] = useState(0)\n  \n//   const goodClick = ()=>{\n//     setGood(good + 1)\n\n//   }\n\n\n//   const neutralClick = () =>{\n//     setNeutral(neutral + 1)\n//   }\n\n//   const badClick = () =>{\n//     setBad(bad + 1)\n//   }\n\n\n//   return(\n//     <div>\n//       <h1>\n//         Give Feedback\n//       </h1>\n\n//       <Button onclick={goodClick} text={\"good\"}/>\n//       <Button onclick={neutralClick} text={\"neutral\"}/>\n//       <Button onclick={badClick} text={\"bad\"}/>\n      \n//       <h1>\n//         Statistics\n//       </h1>\n//       <Display text = {\"good\"} value = {good}/>\n//       <Display text = {\"neutral\"} value = {neutral}/>\n//       <Display text = {\"bad\"} value = {bad}/>\n//     </div>\n//   )\n\n\n// }\n\n//1.7 unicafe step 2\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n\n// const Display = ({text,value}) =>{\n\n//   return (\n//     <div>\n//       {text},{value}\n//     </div>\n//   )\n// }\n\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n    \n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n    \n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Display text={\"good\"} value={good}/>\n// <Display text={\"neutral\"} value={neutral}/>\n// <Display text={\"bad\"} value={bad}/>\n\n\n// <p>\n//   Average {(good - bad)/(good + neutral + bad)}\n// </p>\n// <p>\n//   Postive { (good / (good + neutral +bad)) * 100} %\n// </p>\n\n\n//   </div>\n//  )\n// }\n\n\n\n//1.8 unicafe step 3\n\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n\n// const Statistics= ({text,value}) =>{\n\n//   return (\n//     <div>\n//       {text},{value}\n//     </div>\n//   )\n// }\n\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n    \n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n    \n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Statistics text={\"good\"} value={good}/>\n// <Statistics text={\"neutral\"} value={neutral}/>\n// <Statistics text={\"bad\"} value={bad}/>\n\n\n// <p>\n//   Average {(good - bad)/(good + neutral + bad)}\n// </p>\n// <p>\n//   Postive { (good / (good + neutral +bad)) * 100} %\n// </p>\n\n\n//   </div>\n//  )\n// }\n\n\n\n//1.9 unicafe step 4\n\n// const Button = ({click,text}) =>{\n//   return(\n//     <div>\n//       <button onClick={click}>\n//         {text}\n//       </button>\n//     </div>\n//   )\n// }\n\n\n// const Statistics= ({text,value}) =>{\n\n//   return (\n//     <div>\n//       {text},{value}\n//     </div>\n//   )\n// }\n\n\n// const Display = ({good,neutral,bad}) =>{\n//   if (good === 0 && neutral === 0 && bad === 0){\n//     return(\n//     <p>\n//       No Feed Given\n//     </p>\n//     )\n//     }\n//     else{\n//     return(\n//       <div>\n//       <p>\n//       Average {(good - bad)/(good + neutral + bad)}\n//     </p>\n    \n    \n//     <p>\n//     Postive { (good / (good + neutral +bad)) * 100} %\n//     </p>\n//     </div>\n//     )\n// }\n// }\n\n// const App = () =>{\n//  const [good, setGood] = useState(0)\n//  const [neutral, setNeutral] = useState(0)\n//  const [bad, setBad] = useState(0)\n\n//  const GoodClick = () => {\n//   setGood(good + 1)\n//  }\n\n//  const NeutralClick = () =>{\n//   setNeutral(neutral + 1)\n//  }\n\n\n//  const BadClick = () =>{\n//   setBad(bad + 1)\n//  }\n\n//  return(\n//   <div>\n//     <h1>\n//       Give Feedback\n//     </h1>\n    \n//     <Button click={GoodClick} text={\"good\"}/>\n//     <Button click={NeutralClick} text={\"neutral\"}/>\n//     <Button click={BadClick} text={\"bad\"}/>\n    \n//     <h1>\n//       Statistics\n//     </h1>\n\n// <Statistics text={\"good\"} value={good}/>\n// <Statistics text={\"neutral\"} value={neutral}/>\n// <Statistics text={\"bad\"} value={bad}/>\n\n// <Display good = {good} bad = {bad} neutral = {neutral}/>\n\n//   </div>\n//  )\n// }\n\n\n\n\n//1.10 unicafe step 5\nconst Button = ({click,text}) =>{\n  return(\n    <div>\n      <button onClick={click}>\n        {text}\n      </button>\n    </div>\n  )\n}\n\n\nconst Statistics= (props) =>{\n\n  // return (\n  //   <div>\n  //     {text},{value}\n  //   </div>\n  // )\n  return(\n    <div>\n      <StatisticLine text = \"good\" value = {props.a}/>\n      <StatisticLine text = \"neutral\" value = {props.n}/>\n      <StatisticLine text = \"bad\" value = {props.b}/>\n\n    </div>\n  )\n}\n\nconst StatisticLine = ({text,value}) =>{\n  return (\n    <div>\n       {text},{value}\n    </div>\n   )\n\n}\n\nconst Display = ({good,neutral,bad}) =>{\n  if (good === 0 && neutral === 0 && bad === 0){\n    return(\n    <p>\n      No Feedback Given\n    </p>\n    )\n    }\n    else{\n    return(\n      <div>\n      <p>\n      Average {(good - bad)/(good + neutral + bad)}\n    </p>\n    \n    \n    <p>\n    Postive { (good / (good + neutral +bad)) * 100} %\n    </p>\n    </div>\n    )\n}\n}\n\nconst App = () =>{\n const [good, setGood] = useState(0)\n const [neutral, setNeutral] = useState(0)\n const [bad, setBad] = useState(0)\n\n const GoodClick = () => {\n  setGood(good + 1)\n }\n\n const NeutralClick = () =>{\n  setNeutral(neutral + 1)\n }\n\n\n const BadClick = () =>{\n  setBad(bad + 1)\n }\n\n\n const props = {\n  a:good,\n  n:neutral,\n  b:bad\n\n }\n\n return(\n  <div>\n    <h1>\n      Give Feedback\n    </h1>\n    \n    <Button click={GoodClick} text={\"good\"}/>\n    <Button click={NeutralClick} text={\"neutral\"}/>\n    <Button click={BadClick} text={\"bad\"}/>\n    \n    <h1>\n      Statistics\n    </h1>\n\n<Statistics text={\"good\"} props={props}/>\n\n<Display good = {good} bad = {bad} neutral = {neutral}/>\n\n  </div>\n )\n}\n\n\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA;AACA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAGA;AACA;AACA;AACA;AACE;AACA;;AAIF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAIA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACE;AACF;AACE;;AAGF;AACA;;AAIA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;;AAGA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAIA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAKA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGA,CAAC;EAACC,KAAK;EAACC;AAAI,CAAC,KAAI;EAC9B,oBACEH,OAAA;IAAAI,QAAA,eACEJ,OAAA;MAAQK,OAAO,EAAEH,KAAM;MAAAE,QAAA,EACpBD;IAAI;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAAC,EAAA,GARKT,MAAM;AAWZ,MAAMU,UAAU,GAAGC,KAAK,IAAI;EAE1B;EACA;EACA;EACA;EACA;EACA,oBACEZ,OAAA;IAAAI,QAAA,gBACEJ,OAAA,CAACa,aAAa;MAACV,IAAI,EAAG,MAAM;MAACW,KAAK,EAAIF,KAAK,CAACG;IAAE;MAAAT,QAAA,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}